# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-01-02 08:39
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('accountId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('phoneNumber', models.CharField(max_length=45, unique=True)),
                ('accountCreateDate', models.DateTimeField(auto_now_add=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountTaskAssociate',
            fields=[
                ('accountTaskAssociateId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('account_accountId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'account_task_associate',
            },
        ),
        migrations.CreateModel(
            name='EntityPool',
            fields=[
                ('entityId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('entityName', models.CharField(max_length=45, unique=True)),
                ('entityColor', models.CharField(max_length=45)),
                ('entityShortcur', models.CharField(max_length=45)),
                ('TaskCategory_taskcategoryId', models.IntegerField()),
            ],
            options={
                'db_table': 'entity_pool',
            },
        ),
        migrations.CreateModel(
            name='LabelResultFile',
            fields=[
                ('labelResultFileId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('labelResultFileName', models.CharField(max_length=255, unique=True)),
                ('labelResultFileCreateDate', models.DateTimeField(auto_now_add=True)),
                ('labelResultFileEditor', models.CharField(max_length=45)),
                ('labelResultFileStatus', models.CharField(max_length=45)),
                ('labelResultFileText', models.TextField()),
            ],
            options={
                'db_table': 'label_result_file',
            },
        ),
        migrations.CreateModel(
            name='OriginalFile',
            fields=[
                ('originalFileId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('originalFileName', models.CharField(max_length=45, unique=True)),
                ('originalFileOwner', models.CharField(max_length=45)),
                ('originalFileCreateDate', models.DateTimeField(auto_now_add=True)),
                ('originalFileStatus', models.CharField(max_length=45)),
                ('originalFileText', models.TextField()),
            ],
            options={
                'db_table': 'original_file',
            },
        ),
        migrations.CreateModel(
            name='RelationPool',
            fields=[
                ('relationId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('relationName', models.CharField(max_length=45, unique=True)),
                ('relationColor', models.CharField(max_length=45)),
                ('relationShortcut', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'relation_pool',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('taskId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('taskName', models.CharField(max_length=255, unique=True)),
                ('taskCreateDate', models.DateTimeField(auto_now_add=True)),
                ('taskStatus', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'task',
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('taskCategoryId', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('taskCategoryName', models.CharField(max_length=45)),
                ('taskCategoryCreateDate', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_category',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='taskCategory_TaskCategoryID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='labelDB.TaskCategory'),
        ),
        migrations.AddField(
            model_name='relationpool',
            name='taskCategory_taskCategoryId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='labelDB.TaskCategory'),
        ),
        migrations.AddField(
            model_name='accounttaskassociate',
            name='labelResultFile_originalLabelResultFileId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='originalResult', to='labelDB.LabelResultFile'),
        ),
        migrations.AddField(
            model_name='accounttaskassociate',
            name='labelResultFile_updatedLabelResultFileId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updatedResult', to='labelDB.LabelResultFile', unique=True),
        ),
        migrations.AddField(
            model_name='accounttaskassociate',
            name='originalFile_originalFileId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='labelDB.OriginalFile'),
        ),
        migrations.AddField(
            model_name='accounttaskassociate',
            name='task_taskId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='labelDB.Task'),
        ),
    ]
